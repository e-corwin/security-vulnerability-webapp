import requests
import json
from datetime import datetime
from datetime import date 
from dateutil.relativedelta import relativedelta
from key_variable import Headers
import copy
import time
import os
import sys

'''
CVE DATA PULL
'''
def updateCVE():
    today = date.today()
    one_month_ago = today + relativedelta(months=-1)
    four_months_ago = today - relativedelta(days=120)

    iso_datetime_today = today.strftime('%Y-%m-%dT%H:%M:%S.%f%z')
    iso_datetime_month_ago = one_month_ago.strftime('%Y-%m-%dT%H:%M:%S.%f%z')
    iso_datetime_120_days_ago = four_months_ago.strftime('%Y-%m-%dT%H:%M:%S.%f%z')

    if len(sys.argv) > 1 and sys.argv[1] == "-all":
        startDate = iso_datetime_120_days_ago
    else: 
        startDate = iso_datetime_month_ago

    startIndex = 0
    startIndexString = str(startIndex)

    url = "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=" + startDate + "&" + "lastModEndDate=" + iso_datetime_today + "&startIndex=" + startIndexString
    cve_api = requests.get(url, headers=Headers)
    cve_data = json.loads(cve_api.content)

    resultsPerPage = cve_data['resultsPerPage']
    totalResults = cve_data['totalResults']
    print("Total CVE Results: ", totalResults)
    cve_data_full = {}
    cve_data_full['vulnerabilities'] = []

    while startIndex < totalResults:
        startIndexString = str(startIndex)
        print(startIndexString , "/", totalResults, "done")
        url = "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=" + startDate + "&" + "lastModEndDate=" + iso_datetime_today + "&startIndex=" + startIndexString

        cve_api = requests.get(url, headers=Headers)
        cve_new_data = json.loads(cve_api.content)
        if startIndex == 0:
            cve_data_full = copy.deepcopy(cve_new_data)
        else:
            cve_data_full['vulnerabilities'] += (cve_new_data['vulnerabilities'])
        startIndex = startIndex + resultsPerPage
    
    keys_to_remove = ['sourceIdentifier', 'cisaExploitAdd', 'cisaActionDue']
    for i in cve_data_full['vulnerabilities']:
        for key in keys_to_remove:
            if key in i:
                i.pop(key)
    
    with open(f"./cve-data-full.json", "w") as outfile:
        json.dump(cve_data_full, outfile, indent = 2)
    
    return cve_data_full

'''
CISA DATA PULL
'''
def updateCISA():
    
    cisa_api = requests.get('https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json')
    cisa_data = json.loads(cisa_api.content)

    keys_to_remove = ['dueDate', 'knownRansomwareCampaignUse', 'notes']
    for i in cisa_data['vulnerabilities']:
        for key in keys_to_remove:
            i.pop(key, None)

    with open(f"./cisa-data-full.json", "w") as outfile:
        json.dump(cisa_data, outfile, indent = 2)

    return cisa_data


def main():
    # Check modification data of cve-data-full.json to determine whether to update the databases or not
    path = './cve-data-full.json'
    if os.path.exists(path):
        modify_time = os.path.getmtime(path)
        convert_time = time.localtime(modify_time)
        format_time = time.strftime('%d%m%Y %H:%M:%S', convert_time)
        datetime_object = datetime.strptime(format_time, '%d%m%Y %H:%M:%S')
        last_mod_date = datetime_object.date()
    else:
        last_mod_date = None
    
    today = datetime.now()
    today_date = today.date()

    if  last_mod_date == None or last_mod_date < today_date:
        # data will update
        print("Updating Data. This may take a few seconds.")
        updateCISA()
        print("CISA data update complete")
        updateCVE()
        print("CVE data update complete")
        print("Ready to run CVE Compilation")
    else:
        # data is already updated
        print("Data in file" + " " + "\'" + path + "\'" + " " + "is already up to date.\nTo force an update, please delete" " " +  "\'" + path + "\'")
        print("Ready to run CVE Compilation")

if __name__ == "__main__":
    main()