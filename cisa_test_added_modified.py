import requests
import json
from datetime import date, datetime, timedelta
from dateutil.relativedelta import relativedelta

def cisaModifiedToday(cisa_data):
    #cisa_api = requests.get('https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json')
    #isa_data = json.loads(cisa_api.content)

    # Finding Today's Date
    todays_date = datetime.today()
    todays_date_string = todays_date.strftime("%Y-%m-%d")
    print("Today's Date:" , todays_date_string)
    str(todays_date)

    length_cisa_data = len(cisa_data['vulnerabilities'])
    print(length_cisa_data)

    added_today_dict = {}
    added_today_dict['addedToday'] = []

    # ADDED TODAY


    # Converts the due date string into a date type with format YYYY-MM-DD

    # Add date has to be less than today and greater than 1 week from today
    i = 0

    while i < length_cisa_data:
        add_date_datetype = datetime.strptime(cisa_data['vulnerabilities'][i]['dateAdded'], "%Y-%m-%d")
        if add_date_datetype == todays_date:
            added_today_dict['addedToday'].append(cisa_data['vulnerabilities'][i])
        i = i + 1

    with open(f"cisa_added_today_dict.json", "w") as outfile:
        json.dump(added_today_dict, outfile, indent = 2)

    return added_today_dict


def cisaModifiedOneWeek(cisa_data):
    #cisa_api = requests.get('https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json')
    #cisa_data = json.loads(cisa_api.content)
    #with open(f"cisa_data.json", "w") as outfile:
    #    json.dump(cisa_data, outfile, indent = 2)


    # Finding Today's Date
    todays_date = datetime.today()
    todays_date_string = todays_date.strftime("%Y-%m-%d")
    print("Today's Date:" , todays_date_string)
    str(todays_date)
    
    week_before_date = todays_date - timedelta(weeks = 1) 
    print("Week before date: ", week_before_date)

    length_cisa_data = len(cisa_data['vulnerabilities'])
    print(length_cisa_data)

    add_in_week_dict = {}
    add_in_week_dict['recentlyAdded'] = []

    # ADDED IN THE LAST WEEK

    # Add date has to be less than today and greater than 1 week from today


    # Converts the due date string into a date type with format YYYY-MM-DD
    


    # Add date has to be less than today and greater than 1 week from today
    i = 0

    while i < length_cisa_data:
        add_date_datetype = datetime.strptime(cisa_data['vulnerabilities'][i]['dateAdded'], "%Y-%m-%d")
        if add_date_datetype <= todays_date and add_date_datetype >= week_before_date:
            add_in_week_dict['recentlyAdded'].append(cisa_data['vulnerabilities'][i])
        i = i + 1

    with open(f"cisa_week_added_dict.json", "w") as outfile:
        json.dump(add_in_week_dict, outfile, indent = 2)

    return add_in_week_dict


def cisaModifiedOneMonth(cisa_data):
    #cisa_api = requests.get('https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json')
    #cisa_data = json.loads(cisa_api.content)

    # Finding Today's Date
    todays_date = datetime.today()
    todays_date_string = todays_date.strftime("%Y-%m-%d")
    print("Today's Date:" , todays_date_string)
    str(todays_date)
    
    month_before_date = todays_date - relativedelta(months=1) 
    print("Month before date: ", month_before_date)

    length_cisa_data = len(cisa_data['vulnerabilities'])
    print(length_cisa_data)

    add_in_month_dict = {}
    add_in_month_dict['recentlyAdded'] = []

    # ADDED IN THE LAST MONTH

    # Add date has to be less than today and greater than 1 month from today

    # Converts the due date string into a date type with format YYYY-MM-DD


    # Add date has to be less than today and greater than 1 week from today
    i = 0

    while i < length_cisa_data:
        add_date_datetype = datetime.strptime(cisa_data['vulnerabilities'][i]['dateAdded'], "%Y-%m-%d")
        if add_date_datetype <= todays_date and add_date_datetype >= month_before_date:
            add_in_month_dict['recentlyAdded'].append(cisa_data['vulnerabilities'][i])
        i = i + 1
    with open(f"cisa_month_added_dict.json", "w") as outfile:
        json.dump(add_in_month_dict, outfile, indent = 2)

    return add_in_month_dict
