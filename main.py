from flask import Flask, render_template, request
import json
import os
import time
import datetime
from datetime import date
from datetime import datetime
from update_data import updateCVE
from update_data import updateCISA
from cisa_test_added_modified import cisaModifiedToday,cisaModifiedOneWeek, cisaModifiedOneMonth
from cve_test_added_modified import cveModifiedToday, cveModifiedOneWeek, cveModifiedOneMonth


app = Flask(__name__)
'''
@app.route('/postjson', methods = ['POST'])
def postJsonHandler():
    print(request.is_json)
    content = request.get_json()
    print(content)
    return 'JSON posted'
  
app.run(host='0.0.0.0', port= 8090)
'''
@app.route("/", methods=['GET', 'POST'])
def home():
    # Check modification data of cve-data-full.json to determine whether to update or not
    path = '/Users/eliscorwin/security-vulnerability-webapp/cve-data-full.json'
    modify_time = os.path.getmtime(path)
    #print(modify_time)
    convert_time = time.localtime(modify_time)
    format_time = time.strftime('%d%m%Y %H:%M:%S', convert_time)
    datetime_object = datetime.strptime(format_time, '%d%m%Y %H:%M:%S')
    #print('Modified on:', datetime_object)
    #print(type(datetime_object))
    today = datetime.now()
    #print(today)
    file_name = "/Users/eliscorwin/security-vulnerability-webapp/cve_test_update_data.py"
    #print(os.path.isfile(file_name))
    #print(os.path.isdir(file_name))
    last_mod_date = datetime_object.date()
    today_date = today.date()
    print(last_mod_date)
    print(today_date)
    if last_mod_date < today_date: 
        print("update")
        updateCISA()
        updateCVE()
    
    f = open('/Users/eliscorwin/security-vulnerability-webapp/cve-data-full.json')
    DATA_CVE = json.load(f)
    f = open('/Users/eliscorwin/security-vulnerability-webapp/cisa-data-full.json')
    DATA_CISA = json.load(f)

    number = len(DATA_CISA['vulnerabilities'])
    print(number)

    vendor_list= []
    i = 0
    while i < number:
        vendor = DATA_CISA['vulnerabilities'][i]['vendorProject']
        if vendor not in vendor_list:
            vendor_list.append(vendor)
        i = i + 1

    print(vendor_list)

    recent_ten = []
    form = request.method
    newest = request.args.get("time")
    severity = request.args.get("severity")
    vendor = request.args.get("vendor")
    print(newest)
    print(severity)
    print(vendor)
    
    # Choose Last Modified Time Filtering
    today = date.today()
    newest_to_post = {}
    newest_to_post['vulnerabilities'] = []

    # Defining keys to remove
    cisa_keys_to_remove = ['dueDate', 'knownRansomwareCampaignUse', 'notes'] 
    cve_keys_to_remove = []

    if newest == "1week":
        print("Time = 1 week")
        cisa_modified_one_week = cisaModifiedOneWeek()
        for i in cisa_modified_one_week['recentlyAdded']:
            print(i['cveID'])
            for key in cisa_keys_to_remove:
                i.pop(key, None)
            newest_to_post['vulnerabilities'].append(i)
            print(newest_to_post)
        print("---")
        cve_modified_one_week = cveModifiedOneWeek()
        for i in cve_modified_one_week['recentlyAdded']:
            print(i['cve'])
            #for key in cve_keys_to_remove:
             #   i.pop(key, None)
            newest_to_post['vulnerabilities'].append(i)
            print(newest_to_post)
        print("-----------")
        print(newest_to_post)
    

    if newest == "today":
        print("Time = Today")
        cisa_modified_today = cisaModifiedToday()
        cve_modified_today = cveModifiedToday()
        if cisa_modified_today['addedToday'] == [] and cve_modified_today['addedToday'] == []:
            print("Nothing modified today")
        else:
            for i in cisa_modified_today['addedToday']:
                for key in cisa_keys_to_remove:
                    i.pop(key, None)
                newest_to_post['vulnerabilities'].append(i)
                print(newest_to_post)
                print("---")
            for i in cve_modified_one_week['recentlyAdded']:
                print(i['cve'])
                #for key in cve_keys_to_remove:
                #   i.pop(key, None)
                newest_to_post['vulnerabilities'].append(i)
                print(newest_to_post)
            print("-----------")
            print(newest_to_post)


    if newest == "1month":
        print("Time = 1 month")
        cisa_modified_one_month = cisaModifiedOneMonth()
        cve_modified_one_month = cveModifiedOneMonth()

        for i in cisa_modified_one_month['recentlyAdded']:
            for key in cisa_keys_to_remove:
                i.pop(key, None)
            newest_to_post['vulnerabilities'].append(i)
            print(newest_to_post)
            print("---")
        for i in cve_modified_one_month['recentlyAdded']:
                print(i['cve'])
                #for key in cve_keys_to_remove:
                #   i.pop(key, None)
                newest_to_post['vulnerabilities'].append(i['cve'])
                print(newest_to_post)
        print("-----------")
        print(newest_to_post)

    return render_template("home.html", vendors=vendor_list, newest_filter=newest_to_post)



# CVE function, pass in a list of CVEs

    # need to return an HTML document
    #render_template('index.html')
'''
@app.route("/search", methods=['GET', 'POST'])
def search():
   
    if request.method == 'POST':
        if request.form.get('action1') == 'VALUE1':
            pass # do something
        elif request.form.get('action2') == 'VALUE2':
            pass # do something else
        else:
            pass # unknown
    elif request.method == 'GET':
        return render_template('home.html', form=form)
    
    return render_template("home.html", form=form)

'''

if __name__ == "__main__":
    app.run(debug=True, port=8001)