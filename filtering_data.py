from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

# Filtering Algorithm for NIST NVD CVE Data
def cveFiltering(cve_data, newest, severity, vendor):
    todays_date = datetime.today()

    week_before_date = todays_date - timedelta(weeks = 1) 
    month_before_date = todays_date - relativedelta(months=1)
    year_before_date = todays_date - relativedelta(year=1)

    filtered_dict = {}
    filtered_dict['vulnerabilities'] = []
    
    # Determines earliest start date based on user input
    start_date = None
    if newest == None:
        start_date = todays_date
    if newest == "today":
        start_date = todays_date
    if newest == "1week":
        start_date = week_before_date
    if newest == "1month":
        start_date = month_before_date
    if newest == "1year":
        start_date = year_before_date
    
    for i in cve_data['vulnerabilities']:
        time_match = False
        severity_match = False
        vendor_match = False
        cve_data_string = (i['cve']['published'])[:10]
        if datetime.strptime(cve_data_string, '%Y-%m-%d') >= start_date: # checks time match
            time_match = True
            if severity == "all" or severity == "severityUnmatched": # checks severity match
                severity_match = True
            else:
                if 'cvssMetricV31' in i['cve']['metrics']:
                    if severity == i['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseSeverity']:
                        severity_match = True
                elif 'cvssMetricV2' in i['cve']['metrics']:
                    if severity == i['cve']['metrics']['cvssMetricV2'][0]['baseSeverity']:
                        severity_match = True
                else: 
                    if severity == "severityUnrecognized":
                        severity_match = True
                    
            if vendor == "all" or vendor == "vendorUnrecognized": # checks vendor match
                vendor_match = True

            if (time_match and severity_match and vendor_match) == True:
                filtered_dict['vulnerabilities'].append(i)
       
    return filtered_dict

# Filtering Algorithm for CISA Data
def cisaFiltering(cisa_data, newest, severity, vendor):
    todays_date = datetime.today()
    week_before_date = todays_date - timedelta(weeks = 1) 
    month_before_date = todays_date - relativedelta(months=1)
    year_before_date = todays_date - relativedelta(year=1)

    cisa_filtered_dict = {}
    cisa_filtered_dict['vulnerabilities'] = []
    
    # Determines earliest start date based on user input
    start_date = None
    if newest == None:
        start_date = todays_date
    if newest == "today":
        start_date = todays_date
    if newest == "1week":
        start_date = week_before_date
    if newest == "1month":
        start_date = month_before_date
    if newest == "1year":
        start_date = year_before_date
    
    for i in cisa_data['vulnerabilities']:
        time_match = False
        severity_match = False
        vendor_match = False
        if datetime.strptime(i['dateAdded'], '%Y-%m-%d') >= start_date: # checks time match
            time_match = True
            
            if severity == "all" or severity == "severityUnrecognized": # checks severity match
                severity_match = True
            
            if vendor == i['vendorProject']: # checks vendor match
                vendor_match = True
            elif vendor == "all" or vendor == "vendorUnrecognized":
                vendor_match = True
        
            if (time_match and severity_match and vendor_match) == True:
                cisa_filtered_dict['vulnerabilities'].append(i)

    return cisa_filtered_dict
