import requests
import json
from datetime import date, datetime, timedelta
from dateutil.relativedelta import relativedelta
'''
test = cve_data['vulnerabilities'][0]['cve']
print(test)
cve_keys_to_remove = ['sourceIdentifier', 'cisaExploitAdd', 'cisaActionDue']
for key in cve_keys_to_remove:
    test.pop(key, None)
del test['descriptions'][0]['lang']
del test['descriptions'][1]['lang']
del test['weaknesses']
del test['configurations']
del test['references']
del test['metrics']['cvssMetricV2'][0]['source']
#del test['metrics']['cvssMetricV2'][0]['metric']
#del test['metrics']['cvssMetricV2']['type']

# for key in keys:
 #   test['metrics']['cvssMetricV2'][0].pop(key, None)


print("----")
print(test)

with open(f"testing.json", "w") as outfile:
    json.dump(test, outfile, indent = 2)

'''
def cveFiltering(cve_data, newest, severity, vendor):
    #cve_data = updateCVE()
    with open(f"DATA.json", "w") as outfile:
        json.dump(cve_data, outfile, indent = 2)

    # Finding Today's Date
    todays_date = datetime.today()

    week_before_date = todays_date - timedelta(weeks = 1) 
    month_before_date = todays_date - relativedelta(months=1)
    year_before_date = todays_date - relativedelta(year=1)
    #print("Today's date", todays_date) 
    #print("Week before date: ", week_before_date)
    #print("Month before date: ", month_before_date)

    #length_cve_data = len(cve_data['vulnerabilities'])
    #print(length_cve_data)

    filtered_dict = {}
    filtered_dict['vulnerabilities'] = []

    # Converts the due date string into a date type with format YYYY-MM-DD
    
    # Anything after this time can be added
    start_date = None
    if newest == None:
        start_date = todays_date
    if newest == "today":
        start_date = todays_date
    if newest == "1week":
        start_date = week_before_date
    if newest == "1month":
        start_date = month_before_date
    if newest == "1year":
        start_date = year_before_date
    
    i = 0
    time_match = False
    severity_match = False
    vendor_match = False
    print(start_date)
    print(cve_data['vulnerabilities'][0]['cve']['published'])
    print(cve_data['vulnerabilities'][0]['cve']['published'][:10])
    cve_data_string = (cve_data['vulnerabilities'][0]['cve']['published'][:10])
    for i in cve_data['vulnerabilities']:
        #print(cve_data['vulnerabilities'][i]['cve']['lastModified'])
        #cve_data_string = (cve_data['vulnerabilities'][i]['cve']['lastModified'])[:10]
        #print(cve_data_string)
        #print(type(datetime.strptime(cve_data_string, '%Y-%m-%d')))
        #print(type(start_date))
        #print(cve_data['vulnerabilities'][i]['cve']['published'])
        if datetime.strptime(cve_data_string, '%Y-%m-%d') >= start_date: # checks time match (time will be true if)
            time_match = True
        if severity == "all" or severity == "severityUnmatched":
            severity_match = True
        else:
            #print("------")
            if 'cvssMetricV31' in i:
                print("cvssMetricV31")
                #print(cve_data['vulnerabilities'][i]['cve']['metrics']['cvssMetricV31'])#[0]['baseSeverity'])
            elif 'cvssMetricV2' in i:
                print("cvssMetricV2")
                #print(cve_data['vulnerabilities'][i]['cve']['metrics']['cvssMetricV31'])
            #else: 
             #   print("NO SEVERITY")
            '''
            if severity == "high" and (cve_data['vulnerabilities'][i]['cve']['metrics']['cvssMetricV2'][0]['baseSeverity']) == "HIGH":
                severity_match = True
            if severity == "med" and (cve_data['vulnerabilities'][i]['cve']['metrics']['cvssMetricV2'][0]['baseSeverity']) == "MED":
                severity_match = True
            if severity == "low" and (cve_data['vulnerabilities'][i]['cve']['metrics']['cvssMetricV2'][0]['baseSeverity']) == "LOW":
                severity_match = True
            '''
        if vendor == "all" or vendor == "vendorUnrecognized":
            vendor_match = True

        #print("CVE time match: ", time_match)
        #print("CVE severity match: ", severity_match)
        #print("CVE vendor match: ", vendor_match)

        if (time_match and severity_match and vendor_match) == True:
            filtered_dict['vulnerabilities'].append(cve_data['vulnerabilities'][i]['cve'])
        #i = i + 1

    print(len(filtered_dict['vulnerabilities']), "results from CVE data")

    with open(f"cve_filtered_dict.json", "w") as outfile:
        json.dump(filtered_dict, outfile, indent = 2)

    return filtered_dict
'''
    while i < length_cve_data:
        cve_add_date_datatype = cve_data['vulnerabilities'][i]['cve']['lastModified']
        cve_add_date_string = cve_add_date_datatype[:10]
        cve_add_date_datetime = datetime.strptime(cve_add_date_string, "%Y-%m-%d")
        if cve_add_date_datetime == todays_date:
            added_today_dict['addedToday'].append(cve_data['vulnerabilities'][i])
        i = i + 1
'''
    


def cisaFiltering(cisa_data, newest, severity, vendor):
    todays_date = datetime.today()
    week_before_date = todays_date - timedelta(weeks = 1) 
    month_before_date = todays_date - relativedelta(months=1)
    year_before_date = todays_date - relativedelta(year=1)
    #print("Today's date", todays_date) 
    #print("Week before date: ", week_before_date)
    #print("Month before date: ", month_before_date)

    #length_cve_data = len(cisa_data['vulnerabilities'])
    #print(length_cve_data)

    filtered_dict = {}
    filtered_dict['vulnerabilities'] = []

    # Converts the due date string into a date type with format YYYY-MM-DD
    
    # Anything after this time can be added
    start_date = None
    if newest == None:
        start_date = todays_date
    if newest == "today":
        start_date = todays_date
    if newest == "1week":
        start_date = week_before_date
    if newest == "1month":
        start_date = month_before_date
    if newest == "1year":
        start_date = year_before_date
    
    i = 0

    time_match = False
    severity_match = False
    vendor_match = False
    
    #print(cisa_data['vulnerabilities'][i]['dateAdded'])
    #cisa_data_string = (cisa_data['vulnerabilities'][i]['dateAdded'])[:10]
    #print(cisa_data_string)
    #print(type(datetime.strptime(cisa_data_string, '%Y-%m-%d')))

    while i < len(cisa_data['vulnerabilities']):
        if datetime.strptime((cisa_data['vulnerabilities'][i]['dateAdded'])[:10], '%Y-%m-%d') >= start_date: # checks time match (time will be true if)
            time_match = True
            if severity == "all" or severity == "severityUnrecognized":
                severity_match = True
            
            if vendor == cisa_data['vulnerabilities'][i]['vendorProject'] or vendor == "all" or vendor == "vendorUnrecognized":
                vendor_match = True
            
            #print("CISA time match: ", time_match)
            #print("CISA severity match: ", severity_match)
            #print("CISA vendor match: ", vendor_match)
            
            if (time_match and severity_match and vendor_match) == True:
                print("matched")
                filtered_dict['vulnerabilities'].append(cisa_data['vulnerabilities'][i])

        i = i + 1

    print(len(filtered_dict['vulnerabilities']), "results from CISA data")

    with open(f"cisa_filtered_dict.json", "w") as outfile:
        json.dump(filtered_dict, outfile, indent = 2)

    return filtered_dict
